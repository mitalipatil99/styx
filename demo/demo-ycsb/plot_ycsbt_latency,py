import pandas as pd
import matplotlib.pyplot as plt
import ast
from matplotlib import rcParams





rcParams['figure.figsize'] = [20, 10]  # Reduced height for better aspect ratio


plt.rcParams.update({'font.size': 18})  # Slightly smaller font


warmup_seconds = 10





# Load CSVs


input_df_1 = pd.read_csv('client_requests_1000_snap.csv')


output_df_1 = pd.read_csv('output_1000_snap.csv')





input_df_2 = pd.read_csv('client_requests_1000_snap_query.csv')


output_df_2 = pd.read_csv('output_1000_snap_query.csv')





input_df_3 = pd.read_csv('client_requests_100000_snap.csv')


output_df_3 = pd.read_csv('output_100000_snap.csv')





input_df_4 = pd.read_csv('client_requests_100000_snap_query.csv')


output_df_4 = pd.read_csv('output_100000_snap_query.csv')





input_df_5 = pd.read_csv('client_requests_1000000_snap.csv')


output_df_5 = pd.read_csv('output_1000000_snap.csv')





input_df_6 = pd.read_csv('client_requests_1000000_snap_query.csv')


output_df_6 = pd.read_csv('output_1000000_snap_query.csv')








# Parse request_id byte strings


input_df_1['request_id'] = input_df_1['request_id'].apply(ast.literal_eval)


output_df_1['request_id'] = output_df_1['request_id'].apply(ast.literal_eval)





input_df_2['request_id'] = input_df_2['request_id'].apply(ast.literal_eval)


output_df_2['request_id'] = output_df_2['request_id'].apply(ast.literal_eval)





input_df_3['request_id'] = input_df_3['request_id'].apply(ast.literal_eval)


output_df_3['request_id'] = output_df_3['request_id'].apply(ast.literal_eval)





input_df_4['request_id'] = input_df_4['request_id'].apply(ast.literal_eval)


output_df_4['request_id'] = output_df_4['request_id'].apply(ast.literal_eval)





input_df_5['request_id'] = input_df_5['request_id'].apply(ast.literal_eval)


output_df_5['request_id'] = output_df_5['request_id'].apply(ast.literal_eval)





input_df_6['request_id'] = input_df_6['request_id'].apply(ast.literal_eval)


output_df_6['request_id'] = output_df_6['request_id'].apply(ast.literal_eval)





# Join on request_id


merged_df_1 = pd.merge(input_df_1, output_df_1, on='request_id', suffixes=('_in', '_out'))


merged_df_2 = pd.merge(input_df_2, output_df_2, on='request_id', suffixes=('_in', '_out'))


merged_df_3 = pd.merge(input_df_3, output_df_3, on='request_id', suffixes=('_in', '_out'))


merged_df_4 = pd.merge(input_df_4, output_df_4, on='request_id', suffixes=('_in', '_out'))


merged_df_5 = pd.merge(input_df_5, output_df_5, on='request_id', suffixes=('_in', '_out'))


merged_df_6 = pd.merge(input_df_6, output_df_6, on='request_id', suffixes=('_in', '_out'))





# Compute latency in milliseconds


merged_df_1['latency_ms'] = merged_df_1['timestamp_out'] - merged_df_1['timestamp_in']


merged_df_2['latency_ms'] = merged_df_2['timestamp_out'] - merged_df_2['timestamp_in']


merged_df_3['latency_ms'] = merged_df_3['timestamp_out'] - merged_df_3['timestamp_in']


merged_df_4['latency_ms'] = merged_df_4['timestamp_out'] - merged_df_4['timestamp_in']


merged_df_5['latency_ms'] = merged_df_5['timestamp_out'] - merged_df_5['timestamp_in']


merged_df_6['latency_ms'] = merged_df_6['timestamp_out'] - merged_df_6['timestamp_in']





# Normalize timestamps to start from 0 seconds


t0 = merged_df_1['timestamp_in'].min()


merged_df_1['time_since_start_sec'] = (merged_df_1['timestamp_in'] - t0) / 1000





t1 = merged_df_2['timestamp_in'].min()


merged_df_2['time_since_start_sec'] = (merged_df_2['timestamp_in'] - t1) / 1000





t2 = merged_df_3['timestamp_in'].min()


merged_df_3['time_since_start_sec'] = (merged_df_3['timestamp_in'] - t2) / 1000





t3 = merged_df_4['timestamp_in'].min()


merged_df_4['time_since_start_sec'] = (merged_df_4['timestamp_in'] - t3) / 1000





t4 = merged_df_5['timestamp_in'].min()


merged_df_5['time_since_start_sec'] = (merged_df_5['timestamp_in'] - t4) / 1000





t5 = merged_df_6['timestamp_in'].min()


merged_df_6['time_since_start_sec'] = (merged_df_6['timestamp_in'] - t5) / 1000





# Filter to show only 10 seconds onwards


filtered_df_1 = merged_df_1[merged_df_1['time_since_start_sec'] >= warmup_seconds].sort_values(


    by='time_since_start_sec')


filtered_df_2 = merged_df_2[merged_df_2['time_since_start_sec'] >= warmup_seconds].sort_values(


    by='time_since_start_sec')


filtered_df_3 = merged_df_3[merged_df_3['time_since_start_sec'] >= warmup_seconds].sort_values(


    by='time_since_start_sec')


filtered_df_4 = merged_df_4[merged_df_4['time_since_start_sec'] >= warmup_seconds].sort_values(


    by='time_since_start_sec')


filtered_df_5 = merged_df_5[merged_df_5['time_since_start_sec'] >= warmup_seconds].sort_values(


    by='time_since_start_sec')


filtered_df_6 = merged_df_6[merged_df_6['time_since_start_sec'] >= warmup_seconds].sort_values(


    by='time_since_start_sec')





# Define interval size in seconds


interval_size = 1





# Floor the time to the nearest interval


filtered_df_1['time_bucket'] = (filtered_df_1['time_since_start_sec'] // interval_size) * interval_size


filtered_df_2['time_bucket'] = (filtered_df_2['time_since_start_sec'] // interval_size) * interval_size


filtered_df_3['time_bucket'] = (filtered_df_3['time_since_start_sec'] // interval_size) * interval_size


filtered_df_4['time_bucket'] = (filtered_df_4['time_since_start_sec'] // interval_size) * interval_size


filtered_df_5['time_bucket'] = (filtered_df_5['time_since_start_sec'] // interval_size) * interval_size


filtered_df_6['time_bucket'] = (filtered_df_6['time_since_start_sec'] // interval_size) * interval_size





# Compute mean latency per bucket


mean_latency_df_1 = filtered_df_1.groupby('time_bucket')['latency_ms'].mean().reset_index()


mean_latency_df_2 = filtered_df_2.groupby('time_bucket')['latency_ms'].mean().reset_index()


mean_latency_df_3 = filtered_df_3.groupby('time_bucket')['latency_ms'].mean().reset_index()


mean_latency_df_4 = filtered_df_4.groupby('time_bucket')['latency_ms'].mean().reset_index()


mean_latency_df_5 = filtered_df_5.groupby('time_bucket')['latency_ms'].mean().reset_index()


mean_latency_df_6 = filtered_df_6.groupby('time_bucket')['latency_ms'].mean().reset_index()





# Shift x-axis to start from 0 after warmup


mean_latency_df_1['time_bucket_shifted'] = mean_latency_df_1['time_bucket'] - warmup_seconds


mean_latency_df_2['time_bucket_shifted'] = mean_latency_df_2['time_bucket'] - warmup_seconds


mean_latency_df_3['time_bucket_shifted'] = mean_latency_df_3['time_bucket'] - warmup_seconds


mean_latency_df_4['time_bucket_shifted'] = mean_latency_df_4['time_bucket'] - warmup_seconds


mean_latency_df_5['time_bucket_shifted'] = mean_latency_df_5['time_bucket'] - warmup_seconds


mean_latency_df_6['time_bucket_shifted'] = mean_latency_df_6['time_bucket'] - warmup_seconds





# Create figure with 3 subplots


fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(20, 15))





# Plot in separate subplots


ax1.plot(mean_latency_df_1['time_bucket_shifted'], mean_latency_df_1['latency_ms'],


         label='Mean Latency 1000 keys', linewidth=2, color='blue')


ax1.plot(mean_latency_df_2['time_bucket_shifted'], mean_latency_df_2['latency_ms'],


         label='Mean Latency (Query) 1000 keys', linewidth=2, color='green')


ax1.grid(linestyle="dotted", linewidth=1, alpha=0.7)


ax1.set_ylabel('Latency (ms)')


ax1.set_ylim([2, 20])


ax1.set_xlim([0, 240])


ax1.legend()











ax2.plot(mean_latency_df_3['time_bucket_shifted'], mean_latency_df_3['latency_ms'],


         label='Mean Latency 100000 keys', linewidth=2, color='blue')


ax2.plot(mean_latency_df_4['time_bucket_shifted'], mean_latency_df_4['latency_ms'],


         label='Mean Latency (Query) 100000 keys', linewidth=2, color='green')


ax2.grid(linestyle="dotted", linewidth=1, alpha=0.7)





ax2.set_ylabel('Latency (ms)')


ax2.set_ylim([2, 30])


ax2.set_xlim([0, 240])


ax2.legend()





ax3.plot(mean_latency_df_5['time_bucket_shifted'], mean_latency_df_5['latency_ms'],


         label='Mean Latency 1000000 keys', linewidth=2, color='blue')


ax3.plot(mean_latency_df_6['time_bucket_shifted'], mean_latency_df_6['latency_ms'],


 label='Mean Latency (Query) 1000000 keys', linewidth=2, color='green')Add commentMore actions


ax3.grid(linestyle="dotted", linewidth=1, alpha=0.7)


ax3.set_xlabel('Time (s)')


ax3.set_ylabel('Latency (ms)')


ax3.set_ylim([2, 1000])


ax3.set_xlim([0, 240])


ax3.legend()





plt.tight_layout()


# plt.savefig("latency_ycsb.pdf")


plt.show()